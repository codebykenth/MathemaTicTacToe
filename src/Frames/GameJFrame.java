package Frames;

import java.awt.Image;
import java.util.Random;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import Interface.CheckTileTurn;
import java.awt.event.KeyEvent;
import javax.swing.JTextField;

/**
 *
 * @author Kenth Alexis Osila
 */
public class GameJFrame extends javax.swing.JFrame implements CheckTileTurn {

    Random ran = new Random(); // Instantiate random class to generate random numbers
    int num1, // A variable for first random number
        num2, // A variable for second random number 
        answer = 0; // A variable that hold the value for sum or difference or product
    int p1Lives, // A variable for parsed lblP1LivesCount
        p2Lives; // A variable for parsed lblP2LivesCount
    int pbP1Count = 3, // A variable for progress bar Player 1 count
        pbP2Count = 3; // A variable for progress bar Player 1 count
    int turn; // A variable for player turn in the game
    // These variables will check if the tile is already clicked
    boolean tile1Clicked = false,
            tile2Clicked = false,
            tile3Clicked = false,
            tile4Clicked = false,
            tile5Clicked = false,
            tile6Clicked = false,
            tile7Clicked = false,
            tile8Clicked = false,
            tile9Clicked = false;
    String line = ""; // A variable for checking the winner

    /**
     * Creates new form GameJFrame
     */
    public GameJFrame() {
        initComponents();
        rescaleImages();
        imageNotVisible();
        tileDisabled();
        btnSubmit.setEnabled(false);
        // Set the frame icon
        ImageIcon img = new ImageIcon("C:\\Users\\aisa\\Documents\\NetBeansProjects\\Mathema-TicTacToe\\src\\Images\\gameLogo.png");
        this.setIconImage(img.getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelBg = new javax.swing.JPanel();
        lblQuestion = new javax.swing.JLabel();
        txtAnswer = new javax.swing.JTextField();
        btnSubmit = new javax.swing.JButton();
        btnStart = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        lblCategory = new javax.swing.JLabel();
        lblP1Lives = new javax.swing.JLabel();
        lblP1LivesCount = new javax.swing.JLabel();
        pbP1 = new javax.swing.JProgressBar();
        lblP2Lives = new javax.swing.JLabel();
        lblP2LivesCount = new javax.swing.JLabel();
        pbP2 = new javax.swing.JProgressBar();
        lblP1Name = new javax.swing.JLabel();
        lblP2Name = new javax.swing.JLabel();
        lblAddImgP1 = new javax.swing.JLabel();
        lblMinusImgP1 = new javax.swing.JLabel();
        lblMultiplyImgP1 = new javax.swing.JLabel();
        lblAddImgP2 = new javax.swing.JLabel();
        lblMinusImgP2 = new javax.swing.JLabel();
        lblMultiplyImgP2 = new javax.swing.JLabel();
        btnTile1 = new javax.swing.JButton();
        btnTile2 = new javax.swing.JButton();
        btnTile3 = new javax.swing.JButton();
        btnTile4 = new javax.swing.JButton();
        btnTile5 = new javax.swing.JButton();
        btnTile6 = new javax.swing.JButton();
        btnTile7 = new javax.swing.JButton();
        btnTile8 = new javax.swing.JButton();
        btnTile9 = new javax.swing.JButton();
        line1 = new javax.swing.JPanel();
        line2 = new javax.swing.JPanel();
        tileBg = new javax.swing.JLabel();
        lblBg = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MATHEMA-TICTACTOE");
        setMinimumSize(new java.awt.Dimension(1366, 768));
        setResizable(false);

        panelBg.setMaximumSize(new java.awt.Dimension(1366, 768));
        panelBg.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblQuestion.setBackground(new java.awt.Color(255, 255, 255));
        lblQuestion.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        lblQuestion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblQuestion.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 255), 3, true));
        lblQuestion.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lblQuestion.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblQuestion.setOpaque(true);
        panelBg.add(lblQuestion, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 120, 830, 40));

        txtAnswer.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        txtAnswer.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtAnswer.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 255), 3));
        txtAnswer.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtAnswer.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtAnswerKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAnswerKeyTyped(evt);
            }
        });
        panelBg.add(txtAnswer, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 690, 560, 40));

        btnSubmit.setBackground(new java.awt.Color(204, 204, 204));
        btnSubmit.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnSubmit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/btnSubmit.png"))); // NOI18N
        btnSubmit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSubmit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSubmit.setNextFocusableComponent(txtAnswer);
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });
        panelBg.add(btnSubmit, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 690, 270, 40));

        btnStart.setFont(new java.awt.Font("Segoe UI", 0, 48)); // NOI18N
        btnStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/btnStart.png"))); // NOI18N
        btnStart.setContentAreaFilled(false);
        btnStart.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });
        panelBg.add(btnStart, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 690, 250, 60));

        btnExit.setBackground(new java.awt.Color(204, 0, 0));
        btnExit.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnExit.setForeground(new java.awt.Color(255, 255, 255));
        btnExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/btnExit.png"))); // NOI18N
        btnExit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        panelBg.add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(1180, 40, 150, 50));

        btnBack.setBackground(new java.awt.Color(204, 0, 0));
        btnBack.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/btnBack.png"))); // NOI18N
        btnBack.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        panelBg.add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 150, 50));

        lblCategory.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        lblCategory.setForeground(new java.awt.Color(255, 255, 255));
        lblCategory.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCategory.setText("CATEGORY : ");
        lblCategory.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblCategory.setMaximumSize(new java.awt.Dimension(840, 50));
        lblCategory.setMinimumSize(new java.awt.Dimension(840, 50));
        lblCategory.setPreferredSize(new java.awt.Dimension(840, 50));
        panelBg.add(lblCategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 40, 830, 50));

        lblP1Lives.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblP1Lives.setForeground(new java.awt.Color(204, 204, 204));
        lblP1Lives.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblP1Lives.setText("LIVES");
        panelBg.add(lblP1Lives, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 350, 200, 30));

        lblP1LivesCount.setFont(new java.awt.Font("Segoe UI", 1, 72)); // NOI18N
        lblP1LivesCount.setForeground(new java.awt.Color(255, 255, 255));
        lblP1LivesCount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblP1LivesCount.setText("3");
        lblP1LivesCount.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        panelBg.add(lblP1LivesCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 360, 160, 120));

        pbP1.setForeground(new java.awt.Color(102, 102, 255));
        pbP1.setMaximum(6);
        pbP1.setValue(3);
        panelBg.add(pbP1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 230, 200, 20));

        lblP2Lives.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblP2Lives.setForeground(new java.awt.Color(204, 204, 204));
        lblP2Lives.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblP2Lives.setText("LIVES");
        panelBg.add(lblP2Lives, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 350, 200, 30));

        lblP2LivesCount.setFont(new java.awt.Font("Segoe UI", 1, 72)); // NOI18N
        lblP2LivesCount.setForeground(new java.awt.Color(255, 255, 255));
        lblP2LivesCount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblP2LivesCount.setText("3");
        lblP2LivesCount.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        panelBg.add(lblP2LivesCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(1140, 360, 160, 120));

        pbP2.setForeground(new java.awt.Color(102, 102, 255));
        pbP2.setMaximum(6);
        pbP2.setValue(3);
        panelBg.add(pbP2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 230, 200, 20));

        lblP1Name.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblP1Name.setForeground(new java.awt.Color(204, 204, 204));
        lblP1Name.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblP1Name.setText("PLAYER 1");
        lblP1Name.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        panelBg.add(lblP1Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 270, 200, 40));

        lblP2Name.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblP2Name.setForeground(new java.awt.Color(231, 231, 231));
        lblP2Name.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblP2Name.setText("PLAYER 2");
        lblP2Name.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        panelBg.add(lblP2Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 270, 200, 40));

        lblAddImgP1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAddImgP1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/AddIcon.png"))); // NOI18N
        lblAddImgP1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        panelBg.add(lblAddImgP1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 490, 100, 120));

        lblMinusImgP1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMinusImgP1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/MinusIcon.png"))); // NOI18N
        panelBg.add(lblMinusImgP1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 490, 100, 120));

        lblMultiplyImgP1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMultiplyImgP1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/MultiplyIcon.png"))); // NOI18N
        panelBg.add(lblMultiplyImgP1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 490, 100, 120));

        lblAddImgP2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAddImgP2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/AddIcon.png"))); // NOI18N
        lblAddImgP2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        panelBg.add(lblAddImgP2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1170, 480, 100, 120));

        lblMinusImgP2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMinusImgP2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/MinusIcon.png"))); // NOI18N
        panelBg.add(lblMinusImgP2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1170, 480, 100, 120));

        lblMultiplyImgP2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMultiplyImgP2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/MultiplyIcon.png"))); // NOI18N
        panelBg.add(lblMultiplyImgP2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1170, 480, 100, 120));

        btnTile1.setFont(new java.awt.Font("Segoe UI", 1, 81)); // NOI18N
        btnTile1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        btnTile1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnTile1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnTile1.setMargin(new java.awt.Insets(3, 14, 3, 14));
        btnTile1.setMaximumSize(new java.awt.Dimension(250, 140));
        btnTile1.setMinimumSize(new java.awt.Dimension(250, 140));
        btnTile1.setNextFocusableComponent(txtAnswer);
        btnTile1.setPreferredSize(new java.awt.Dimension(250, 140));
        btnTile1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTile1ActionPerformed(evt);
            }
        });
        panelBg.add(btnTile1, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 190, 250, 140));

        btnTile2.setFont(new java.awt.Font("Segoe UI", 1, 81)); // NOI18N
        btnTile2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        btnTile2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnTile2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnTile2.setMargin(new java.awt.Insets(3, 14, 3, 14));
        btnTile2.setMaximumSize(new java.awt.Dimension(250, 140));
        btnTile2.setMinimumSize(new java.awt.Dimension(250, 140));
        btnTile2.setNextFocusableComponent(txtAnswer);
        btnTile2.setPreferredSize(new java.awt.Dimension(250, 140));
        btnTile2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTile2ActionPerformed(evt);
            }
        });
        panelBg.add(btnTile2, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 190, 250, 140));

        btnTile3.setFont(new java.awt.Font("Segoe UI", 1, 81)); // NOI18N
        btnTile3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        btnTile3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnTile3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnTile3.setMargin(new java.awt.Insets(3, 14, 3, 14));
        btnTile3.setMaximumSize(new java.awt.Dimension(250, 140));
        btnTile3.setMinimumSize(new java.awt.Dimension(250, 140));
        btnTile3.setNextFocusableComponent(txtAnswer);
        btnTile3.setPreferredSize(new java.awt.Dimension(250, 140));
        btnTile3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTile3ActionPerformed(evt);
            }
        });
        panelBg.add(btnTile3, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 190, 250, 140));

        btnTile4.setFont(new java.awt.Font("Segoe UI", 1, 81)); // NOI18N
        btnTile4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        btnTile4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnTile4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnTile4.setMargin(new java.awt.Insets(3, 14, 3, 14));
        btnTile4.setMaximumSize(new java.awt.Dimension(250, 140));
        btnTile4.setMinimumSize(new java.awt.Dimension(250, 140));
        btnTile4.setNextFocusableComponent(txtAnswer);
        btnTile4.setPreferredSize(new java.awt.Dimension(250, 140));
        btnTile4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTile4ActionPerformed(evt);
            }
        });
        panelBg.add(btnTile4, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 350, 250, 140));

        btnTile5.setFont(new java.awt.Font("Segoe UI", 1, 81)); // NOI18N
        btnTile5.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        btnTile5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnTile5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnTile5.setMargin(new java.awt.Insets(3, 14, 3, 14));
        btnTile5.setMaximumSize(new java.awt.Dimension(250, 140));
        btnTile5.setMinimumSize(new java.awt.Dimension(250, 140));
        btnTile5.setNextFocusableComponent(txtAnswer);
        btnTile5.setPreferredSize(new java.awt.Dimension(250, 140));
        btnTile5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTile5ActionPerformed(evt);
            }
        });
        panelBg.add(btnTile5, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 350, 250, 140));

        btnTile6.setFont(new java.awt.Font("Segoe UI", 1, 81)); // NOI18N
        btnTile6.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        btnTile6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnTile6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnTile6.setMargin(new java.awt.Insets(3, 14, 3, 14));
        btnTile6.setMaximumSize(new java.awt.Dimension(250, 140));
        btnTile6.setMinimumSize(new java.awt.Dimension(250, 140));
        btnTile6.setNextFocusableComponent(txtAnswer);
        btnTile6.setPreferredSize(new java.awt.Dimension(250, 140));
        btnTile6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTile6ActionPerformed(evt);
            }
        });
        panelBg.add(btnTile6, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 350, 250, 140));

        btnTile7.setFont(new java.awt.Font("Segoe UI", 1, 81)); // NOI18N
        btnTile7.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        btnTile7.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnTile7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnTile7.setMargin(new java.awt.Insets(3, 14, 3, 14));
        btnTile7.setMaximumSize(new java.awt.Dimension(250, 140));
        btnTile7.setMinimumSize(new java.awt.Dimension(250, 140));
        btnTile7.setNextFocusableComponent(txtAnswer);
        btnTile7.setPreferredSize(new java.awt.Dimension(250, 140));
        btnTile7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTile7ActionPerformed(evt);
            }
        });
        panelBg.add(btnTile7, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 510, 250, 140));

        btnTile8.setFont(new java.awt.Font("Segoe UI", 1, 81)); // NOI18N
        btnTile8.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        btnTile8.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnTile8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnTile8.setMargin(new java.awt.Insets(3, 14, 3, 14));
        btnTile8.setMaximumSize(new java.awt.Dimension(250, 140));
        btnTile8.setMinimumSize(new java.awt.Dimension(250, 140));
        btnTile8.setNextFocusableComponent(txtAnswer);
        btnTile8.setPreferredSize(new java.awt.Dimension(250, 140));
        btnTile8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTile8ActionPerformed(evt);
            }
        });
        panelBg.add(btnTile8, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 510, 250, 140));

        btnTile9.setFont(new java.awt.Font("Segoe UI", 1, 81)); // NOI18N
        btnTile9.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        btnTile9.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnTile9.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnTile9.setMargin(new java.awt.Insets(3, 14, 3, 14));
        btnTile9.setMaximumSize(new java.awt.Dimension(250, 140));
        btnTile9.setMinimumSize(new java.awt.Dimension(250, 140));
        btnTile9.setNextFocusableComponent(txtAnswer);
        btnTile9.setPreferredSize(new java.awt.Dimension(250, 140));
        btnTile9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTile9ActionPerformed(evt);
            }
        });
        panelBg.add(btnTile9, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 510, 250, 140));

        line1.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout line1Layout = new javax.swing.GroupLayout(line1);
        line1.setLayout(line1Layout);
        line1Layout.setHorizontalGroup(
            line1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        line1Layout.setVerticalGroup(
            line1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        panelBg.add(line1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 170, 10, 500));

        line2.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout line2Layout = new javax.swing.GroupLayout(line2);
        line2.setLayout(line2Layout);
        line2Layout.setHorizontalGroup(
            line2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        line2Layout.setVerticalGroup(
            line2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        panelBg.add(line2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 170, 10, 500));

        tileBg.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tileBg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/tileBg.png"))); // NOI18N
        tileBg.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 7, true));
        tileBg.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        panelBg.add(tileBg, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, 1310, 500));

        lblBg.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblBg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/bg2.png"))); // NOI18N
        panelBg.add(lblBg, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 0, 1390, 768));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1366, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(panelBg, javax.swing.GroupLayout.PREFERRED_SIZE, 1366, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 768, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(panelBg, javax.swing.GroupLayout.PREFERRED_SIZE, 768, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This method rescale all the images that have been used in the frame.
     */
    public void rescaleImages() {
        // Rescale background image
        Icon iBg = lblBg.getIcon();
        ImageIcon imgBg = (ImageIcon) iBg;
        Image imageBg = imgBg.getImage().getScaledInstance(lblBg.getWidth(), lblBg.getHeight(), Image.SCALE_SMOOTH);
        lblBg.setIcon(new ImageIcon(imageBg));

        // Rescale submit button
        Icon iBtnSubmit = btnSubmit.getIcon();
        ImageIcon imgBtnSubmit = (ImageIcon) iBtnSubmit;
        Image imageBtnSubmit = imgBtnSubmit.getImage().getScaledInstance(btnSubmit.getWidth(), btnSubmit.getHeight(), Image.SCALE_SMOOTH);
        btnSubmit.setIcon(new ImageIcon(imageBtnSubmit));

        // Rescale add image p1
        Icon iAddP1 = lblAddImgP1.getIcon();
        ImageIcon imgAddP1 = (ImageIcon) iAddP1;
        Image imageAddP1 = imgAddP1.getImage().getScaledInstance(lblAddImgP1.getWidth(), lblAddImgP1.getHeight(), Image.SCALE_SMOOTH);
        lblAddImgP1.setIcon(new ImageIcon(imageAddP1));

        // Rescale minus image p1
        Icon iMinusP1 = lblMinusImgP1.getIcon();
        ImageIcon imgMinusP1 = (ImageIcon) iMinusP1;
        Image imageMinusP1 = imgMinusP1.getImage().getScaledInstance(lblMinusImgP1.getWidth(), lblMinusImgP1.getHeight(), Image.SCALE_SMOOTH);
        lblMinusImgP1.setIcon(new ImageIcon(imageMinusP1));

        // Rescale add image p2
        Icon iAddP2 = lblAddImgP2.getIcon();
        ImageIcon imgAddP2 = (ImageIcon) iAddP2;
        Image imageAddP2 = imgAddP2.getImage().getScaledInstance(lblAddImgP2.getWidth(), lblAddImgP2.getHeight(), Image.SCALE_SMOOTH);
        lblAddImgP2.setIcon(new ImageIcon(imageAddP2));

        // Rescale minus image p2
        Icon iMinusP2 = lblMinusImgP2.getIcon();
        ImageIcon imgMinusP2 = (ImageIcon) iMinusP2;
        Image imageMinusP2 = imgMinusP2.getImage().getScaledInstance(lblMinusImgP2.getWidth(), lblMinusImgP2.getHeight(), Image.SCALE_SMOOTH);
        lblMinusImgP2.setIcon(new ImageIcon(imageMinusP2));

        // Rescale multiply image p1
        Icon iMultiplyP1 = lblMultiplyImgP1.getIcon();
        ImageIcon imgMultiplyP1 = (ImageIcon) iMultiplyP1;
        Image imageMultiplyP1 = imgMultiplyP1.getImage().getScaledInstance(lblMultiplyImgP1.getWidth(), lblMultiplyImgP1.getHeight(), Image.SCALE_SMOOTH);
        lblMultiplyImgP1.setIcon(new ImageIcon(imageMultiplyP1));

        // Rescale multiply image p2
        Icon iMultiplyP2 = lblMultiplyImgP2.getIcon();
        ImageIcon imgMultiplyP2 = (ImageIcon) iMultiplyP2;
        Image imageMultiplyP2 = imgMultiplyP2.getImage().getScaledInstance(lblMultiplyImgP2.getWidth(), lblMultiplyImgP2.getHeight(), Image.SCALE_SMOOTH);
        lblMultiplyImgP2.setIcon(new ImageIcon(imageMultiplyP2));

        // Rescale exit button 
        Icon iBtnExit = btnExit.getIcon();
        ImageIcon imgBtnExit = (ImageIcon) iBtnExit;
        Image imageBtnExit = imgBtnExit.getImage().getScaledInstance(btnExit.getWidth(), btnExit.getHeight(), Image.SCALE_SMOOTH);
        btnExit.setIcon(new ImageIcon(imageBtnExit));

        // Rescale back button 
        Icon iBtnBack = btnBack.getIcon();
        ImageIcon imgBtnBack = (ImageIcon) iBtnBack;
        Image imageBtnBack = imgBtnBack.getImage().getScaledInstance(btnBack.getWidth(), btnBack.getHeight(), Image.SCALE_SMOOTH);
        btnBack.setIcon(new ImageIcon(imageBtnBack));

        // Rescale start button 
        Icon iBtnStart = btnStart.getIcon();
        ImageIcon imgBtnStart = (ImageIcon) iBtnStart;
        Image imageBtnStart = imgBtnStart.getImage().getScaledInstance(btnStart.getWidth(), btnStart.getHeight(), Image.SCALE_SMOOTH);
        btnStart.setIcon(new ImageIcon(imageBtnStart));
    }

    /**
     * This method sets most of the components visibility to true.
     * This method will change the icon/image (Add, Subtract, and Multiply) placed for each player.
     * The icon will be multiply sign if the players number of lives is the same
     * The icon will be add sign for the player who has higher number of lives
     * The icon will be minus sign for the player who has lower number of lives
     */
    public void imageVisible() {
        lblMultiplyImgP1.setVisible(true);
        lblMultiplyImgP2.setVisible(true);
        lblP1Name.setVisible(true);
        lblP2Name.setVisible(true);
        lblP1Lives.setVisible(true);
        lblP2Lives.setVisible(true);
        lblP1LivesCount.setVisible(true);
        lblP2LivesCount.setVisible(true);
        pbP1.setVisible(true);
        pbP2.setVisible(true);
        btnBack.setVisible(true);
        btnExit.setVisible(true);
        btnSubmit.setVisible(true);
        txtAnswer.setVisible(true);
        lblQuestion.setVisible(true);

        if (p1Lives == 3 && p2Lives == 3) { // Multiply sign - Default image that is displayed
            lblMultiplyImgP1.setVisible(true);
            lblMultiplyImgP2.setVisible(true);
            lblAddImgP1.setVisible(false);
            lblMinusImgP2.setVisible(false);
            lblMinusImgP1.setVisible(false);
            lblAddImgP2.setVisible(false);
        } else if (p1Lives > p2Lives) { // Add sign - For player 1 is displayed && Minus sign - For player 2 is displayed
            lblAddImgP1.setVisible(true);
            lblMinusImgP2.setVisible(true);
            lblMultiplyImgP1.setVisible(false);
            lblMultiplyImgP2.setVisible(false);
        } else if (p1Lives < p2Lives) { // Add sign - For player 2 is displayed && Minus sign - For player 1 is displayed
            lblMinusImgP1.setVisible(true);
            lblAddImgP2.setVisible(true);
            lblMultiplyImgP1.setVisible(false);
            lblMultiplyImgP2.setVisible(false);
        }
    }

    /**
     * A method for setting most of the components visibility to false.
     */
    public void imageNotVisible() {
        lblAddImgP1.setVisible(false);
        lblMinusImgP1.setVisible(false);
        lblAddImgP2.setVisible(false);
        lblMinusImgP2.setVisible(false);
        lblMultiplyImgP1.setVisible(false);
        lblMultiplyImgP2.setVisible(false);
        lblP1Name.setVisible(false);
        lblP2Name.setVisible(false);
        lblP1Lives.setVisible(false);
        lblP2Lives.setVisible(false);
        
        btnBack.setVisible(false);
        btnExit.setVisible(false);
        btnSubmit.setVisible(false);
        lblQuestion.setVisible(false);
        txtAnswer.setVisible(false);
        lblP1LivesCount.setVisible(false);
        lblP2LivesCount.setVisible(false);
        pbP1.setVisible(false);
        pbP2.setVisible(false);
        
    }
   
    /**
     * This method sets the 3x3 tiles to visible.
     */
    public void tileSetVisible() {
        btnTile1.setVisible(true);
        btnTile2.setVisible(true);
        btnTile3.setVisible(true);
        btnTile4.setVisible(true);
        btnTile5.setVisible(true);
        btnTile6.setVisible(true);
        btnTile7.setVisible(true);
        btnTile8.setVisible(true);
        btnTile9.setVisible(true);
    }
    
    /**
     * This method sets the 3x3 tiles to not visible.
     */
    public void tileNotVisible() {
        btnTile1.setVisible(false);
        btnTile2.setVisible(false);
        btnTile3.setVisible(false);
        btnTile4.setVisible(false);
        btnTile5.setVisible(false);
        btnTile6.setVisible(false);
        btnTile7.setVisible(false);
        btnTile8.setVisible(false);
        btnTile9.setVisible(false);
    }

    /**
     * Returns the value of player 1 name.
     * @return lblP1Name.getText()
     */
    public String getP1Name() {
        return lblP1Name.getText();
    }

    /**
     * This method returns the value of player 2 name.
     * @return lblP2Name.getText()
     */
    public String getP2Name() {
        return lblP2Name.getText();
    }

    /**
     * This method sets the 3x3 tiles to enable.
     */
    public void tileEnabled() {
        btnTile1.setEnabled(true);
        btnTile2.setEnabled(true);
        btnTile3.setEnabled(true);
        btnTile4.setEnabled(true);
        btnTile5.setEnabled(true);
        btnTile6.setEnabled(true);
        btnTile7.setEnabled(true);
        btnTile8.setEnabled(true);
        btnTile9.setEnabled(true);
    }

     /**
     * This method sets the 3x3 tiles to disable.
     */
    public void tileDisabled() {
        btnTile1.setEnabled(false);
        btnTile2.setEnabled(false);
        btnTile3.setEnabled(false);
        btnTile4.setEnabled(false);
        btnTile5.setEnabled(false);
        btnTile6.setEnabled(false);
        btnTile7.setEnabled(false);
        btnTile8.setEnabled(false);
        btnTile9.setEnabled(false);
    }

    /**
     * This method clears the text in question label and answer in text field.
     */
    public void clearQuestionAnswer() {
        lblQuestion.setText("");
        txtAnswer.setText("");
    }

    /**
     * The method that displays message dialog if the answer is incorrect.
     */
    public void incorrectAnswer() {
        if (turn % 2 == 0) {
            JOptionPane.showMessageDialog(null, "Incorrect!");
            JOptionPane.showMessageDialog(null, getP2Name() + " has a chance to steal the mark.");
        } else {
            JOptionPane.showMessageDialog(null, "Incorrect!");
            JOptionPane.showMessageDialog(null, getP1Name() + " has a chance to steal the mark.");
        }
        turn++; // To change the turn of players
        btnSubmit.setEnabled(false); // To prevent the players from clicking the submit button when there is no question shown
        clearQuestionAnswer();
    }

    /**
     * This method process the winning condition of the players
     * This method combines all the marks of the player winning condition.
     * This method checks if there are 3 consecutive marks.
     * The lives of the player will be added by 1, if 3 consecutive marks have been placed.
     * The player lives of the player will be subtracted by 1, if 3 consecutive marks have not been placed.
     */
    public void checkWinner() {
        for (int i = 0; i < 9; i++) {
            switch (i) {
                case 0 -> line = btnTile1.getText() + btnTile2.getText() + btnTile3.getText();
                case 1 -> line = btnTile4.getText() + btnTile5.getText() + btnTile6.getText();
                case 2 -> line = btnTile7.getText() + btnTile8.getText() + btnTile9.getText();
                case 3 -> line = btnTile1.getText() + btnTile4.getText() + btnTile7.getText();
                case 4 -> line = btnTile2.getText() + btnTile5.getText() + btnTile8.getText();
                case 5 -> line = btnTile3.getText() + btnTile6.getText() + btnTile9.getText();
                case 6 -> line = btnTile1.getText() + btnTile5.getText() + btnTile9.getText();
                case 7 -> line = btnTile3.getText() + btnTile5.getText() + btnTile7.getText();
                case 8 -> line = btnTile1.getText() + btnTile2.getText() + btnTile3.getText() + btnTile4.getText() + btnTile5.getText() + btnTile6.getText() + btnTile7.getText() + btnTile8.getText() + btnTile9.getText();
            }
            switch (line) {
                case "XXX" -> {
                    tileSetVisible();
                    JOptionPane.showMessageDialog(null, getP1Name() + " has gained 1 life.\n" + getP2Name() + " has lost 1 life."); // Show message dialog if player 1 wins
                    
                    // Change the value of players number of lives 
                    p1Lives = Integer.parseInt(lblP1LivesCount.getText()); // Convert P1 lives count label to integer
                    p1Lives++; // Add 1 to Player 1 lives
                    lblP1LivesCount.setText(String.valueOf(p1Lives)); // Display the lives of Player 1
                    p2Lives = Integer.parseInt(lblP2LivesCount.getText()); // Convert P2 lives count label to integer
                    p2Lives--; // Minus 1 to Player 2 lives
                    lblP2LivesCount.setText(String.valueOf(p2Lives)); // Display the lives of Player 2
                    
                    // Change the value of progress bar for players
                    pbP1Count = pbP1.getValue() + 1; // Add 1 to Player 1 lives
                    pbP2Count = pbP2.getValue() - 1; // Minus 1 to Player 2 lives
                    pbP1.setValue(pbP1Count);
                    pbP2.setValue(pbP2Count);
                    
                    imageVisible(); 
                    clearAllText();
                    turn = 0; // Resets the number of turn so that Player 1 is the first player who have a chance to mark a tile.
                    endGame(); // Checks if the game met the criteria for ending the game
                    tileEnabled(); // All buttons are enabled after 3 consecutive marks
                }
                case "OOO" -> {
                    tileSetVisible();
                    JOptionPane.showMessageDialog(null, getP2Name() + " has gained 1 life.\n" + getP1Name() + " has lost 1 life."); // Show message dialog if player 2 wins
                    
                    p1Lives = Integer.parseInt(lblP1LivesCount.getText()); // Convert P1 lives count label to integer
                    p1Lives--; // Minus 1 to Player 1 lives
                    lblP1LivesCount.setText(String.valueOf(p1Lives)); // Display the lives of Player 1
                    p2Lives = Integer.parseInt(lblP2LivesCount.getText()); // Convert P2 lives count label to integer
                    p2Lives++; // Add 1 to Player 2 lives
                    lblP2LivesCount.setText(String.valueOf(p2Lives)); // Display the lives of Player 2
                    
                    // Change the value of progress bar for players
                    pbP1Count = pbP1.getValue() - 1;
                    pbP2Count = pbP2.getValue() + 1;
                    pbP1.setValue(pbP1Count);
                    pbP2.setValue(pbP2Count);
                    
                    imageVisible(); 
                    clearAllText();
                    turn = 0; // Resets the number of turn so that Player 1 is the first player who have a chance to mark a tile.
                    endGame(); // Checks if the game met the criteria for ending the game
                    tileEnabled(); // All buttons are enabled after 3 consecutive marks
                }
            }
        }
    }

    /**
     * This method checks if the game is draw.
     * Checks the number of tile that is already marked, if all tiles already have a mark, then the game is draw
     */
    public void drawGame() {
        if (line.length() == 9) {
            tileSetVisible();
            JOptionPane.showMessageDialog(null, "Game is draw!");
            clearAllText();
            turn = 0; // Resets the number of turn so that Player 1 is the first player who have a chance to mark a tile.
            tileEnabled();
        }
    }

    /**
     * This method checks if the game ending condition is met.
     * This method will make the player proceed to Congratulations frame (WinnerP1JFrame).
     * Both player number of lives will remain.
     * If player 1 lives become 6, then player 1 will win and end the game.
     * If player 2 lives become 6, then player 2 will win and end the game.
     */
    public void endGame() {
        if (lblP1LivesCount.getText().equals("6") && lblP2LivesCount.getText().equals("0")) {
            WinnerP1JFrame congratulationsP1 = new WinnerP1JFrame();
            congratulationsP1.setVisible(true);
            this.dispose();
        } else if (lblP1LivesCount.getText().equals("0") && lblP2LivesCount.getText().equals("6")) {
            WinnerP2JFrame congratulationsP2 = new WinnerP2JFrame();
            congratulationsP2.setVisible(true);
            this.dispose();
        }
    }

    /**
     * This method clears all the text of 3x3 tile, question, and answer.
     */
    public void clearAllText() {
        btnTile1.setText("");
        btnTile2.setText("");
        btnTile3.setText("");
        btnTile4.setText("");
        btnTile5.setText("");
        btnTile6.setText("");
        btnTile7.setText("");
        btnTile8.setText("");
        btnTile9.setText("");
        lblQuestion.setText("");
        txtAnswer.setText("");
    }

    /**
     * This method show a confirm dialog if the players want to exit the game. 
     * @param evt - action event
     */
    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        int choice = JOptionPane.showConfirmDialog(null, "Are you sure you want to exit?", "CONFIRM EXIT", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (choice == 0) {
            System.exit(0);
        }
    }//GEN-LAST:event_btnExitActionPerformed

    /**
     * This method will generate random numbers for Integer 1 and Integer 2 depending on the category that the players choose in SetNameJFrame.
     * This method will perform an operation depending on the category that player chose from previous frame (SetNameJFrame).
     */
    public void generateRandomNumbers() {
        switch (lblCategory.getText()) {
            // If the player chose ADDITION, then the game will generate a random numbers and perform addition.
            case "CATEGORY: ADDITION" -> {
                num1 = ran.nextInt(50, 100);
                num2 = ran.nextInt(50,100);
                answer = num1 + num2;
                lblQuestion.setText(String.valueOf(num1) + " + " + String.valueOf(num2)); // Displays the question
            }
            case "CATEGORY: SUBTRACTION" -> {
                // If the player chose SUBTRACTION, then the game will generate a random numbers and perform subtraction.
                num1 = ran.nextInt(51, 100);
                num2 = ran.nextInt(0, 50);
                answer = num1 - num2;
                lblQuestion.setText(String.valueOf(num1) + " - " + String.valueOf(num2)); // Displays the question
            }
            case "CATEGORY: MULTIPLICATION" -> {
                // If the player chose MULTIPLICATION, then the game will generate a random numbers and perform multiplication.
                num1 = ran.nextInt(2, 50);
                num2 = ran.nextInt(2, 10);
                answer = num1 * num2;
                lblQuestion.setText(String.valueOf(num1) + " * " + String.valueOf(num2)); // Displays the question
            }
        }
    }

    /**
     * This method generates random numbers when clicked.
     * This method sets the other tiles to not visible when clicked.
     * This method will prevent the user from clicking other tiles and the same tile again when clicked.
     * This method will make the submit button enabled when clicked.
     * This method will make the tile1Clicked equals to true when clicked.
     * @param evt - action event
     */
    private void btnTile1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTile1ActionPerformed
        generateRandomNumbers();
        tileNotVisible();
        btnTile1.setVisible(true);
        btnTile1.setEnabled(false);
        btnSubmit.setEnabled(true);
        tile1Clicked = true;
    }//GEN-LAST:event_btnTile1ActionPerformed

    /**
     * This method generates random numbers when clicked.
     * This method sets the other tiles to not visible when clicked.
     * This method will prevent the user from clicking other tiles and the same tile again when clicked.
     * This method will make the submit button enabled when clicked.
     * This method will make the tile1Clicked equals to true when clicked.
     * @param evt - action event
     */
    private void btnTile2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTile2ActionPerformed
        generateRandomNumbers();
        tileNotVisible();
        btnTile2.setVisible(true);
        btnTile2.setEnabled(false);
        btnSubmit.setEnabled(true);
        tile2Clicked = true;
    }//GEN-LAST:event_btnTile2ActionPerformed

    /**
     * This method generates random numbers when clicked.
     * This method sets the other tiles to not visible when clicked.
     * This method will prevent the user from clicking other tiles and the same tile again when clicked.
     * This method will make the submit button enabled when clicked.
     * This method will make the tile1Clicked equals to true when clicked.
     * @param evt - action event
     */
    private void btnTile3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTile3ActionPerformed
        generateRandomNumbers();
        tileNotVisible();
        btnTile3.setVisible(true);
        btnTile3.setEnabled(false);
        btnSubmit.setEnabled(true);
        tile3Clicked = true;
    }//GEN-LAST:event_btnTile3ActionPerformed

    /**
     * This method generates random numbers when clicked.
     * This method sets the other tiles to not visible when clicked.
     * This method will prevent the user from clicking other tiles and the same tile again when clicked.
     * This method will make the submit button enabled when clicked.
     * This method will make the tile1Clicked equals to true when clicked.
     * @param evt - action event
     */
    private void btnTile4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTile4ActionPerformed
        generateRandomNumbers();
        tileNotVisible();
        btnTile4.setVisible(true);
        btnTile4.setEnabled(false);
        btnSubmit.setEnabled(true);
        tile4Clicked = true;
    }//GEN-LAST:event_btnTile4ActionPerformed

    /**
     * This method generates random numbers when clicked.
     * This method sets the other tiles to not visible when clicked.
     * This method will prevent the user from clicking other tiles and the same tile again when clicked.
     * This method will make the submit button enabled when clicked.
     * This method will make the tile1Clicked equals to true when clicked.
     * @param evt - action event
     */
    private void btnTile5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTile5ActionPerformed
        generateRandomNumbers();
        tileNotVisible();
        btnTile5.setVisible(true);
        btnTile5.setEnabled(false);
        btnSubmit.setEnabled(true);
        tile5Clicked = true;
    }//GEN-LAST:event_btnTile5ActionPerformed

    /**
     * This method generates random numbers when clicked.
     * This method sets the other tiles to not visible when clicked.
     * This method will prevent the user from clicking other tiles and the same tile again when clicked.
     * This method will make the submit button enabled when clicked.
     * This method will make the tile1Clicked equals to true when clicked.
     * @param evt - action event
     */
    private void btnTile6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTile6ActionPerformed
        generateRandomNumbers();
        tileNotVisible();
        btnTile6.setVisible(true);
        btnTile6.setEnabled(false);
        btnSubmit.setEnabled(true);
        tile6Clicked = true;
    }//GEN-LAST:event_btnTile6ActionPerformed

    /**
     * This method generates random numbers when clicked.
     * This method sets the other tiles to not visible when clicked.
     * This method will prevent the user from clicking other tiles and the same tile again when clicked.
     * This method will make the submit button enabled when clicked.
     * This method will make the tile1Clicked equals to true when clicked.
     * @param evt - action event
     */
    private void btnTile7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTile7ActionPerformed
        generateRandomNumbers();
        tileNotVisible();
        btnTile7.setVisible(true);
        btnTile7.setEnabled(false);
        btnSubmit.setEnabled(true);
        tile7Clicked = true;
    }//GEN-LAST:event_btnTile7ActionPerformed

    /**
     * This method generates random numbers when clicked.
     * This method sets the other tiles to not visible when clicked.
     * This method will prevent the user from clicking other tiles and the same tile again when clicked.
     * This method will make the submit button enabled when clicked.
     * This method will make the tile1Clicked equals to true when clicked.
     * @param evt - action event
     */
    private void btnTile8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTile8ActionPerformed
        generateRandomNumbers();
        tileNotVisible();
        btnTile8.setVisible(true);
        btnTile8.setEnabled(false);
        btnSubmit.setEnabled(true);
        tile8Clicked = true;
    }//GEN-LAST:event_btnTile8ActionPerformed

    /**
     * This method generates random numbers when clicked.
     * This method sets the other tiles to not visible when clicked.
     * This method will prevent the user from clicking other tiles and the same tile again when clicked.
     * This method will make the submit button enabled when clicked.
     * This method will make the tile1Clicked equals to true when clicked.
     * @param evt - action event
     */
    private void btnTile9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTile9ActionPerformed
        generateRandomNumbers();
        tileNotVisible();
        btnTile9.setVisible(true);
        btnTile9.setEnabled(false);
        btnSubmit.setEnabled(true);
        tile9Clicked = true;
    }//GEN-LAST:event_btnTile9ActionPerformed

    /**
     * This method checks the answer if the tile is clicked
     */
    public void tileClicked() {
        if (tile1Clicked) {
            checkTile1Turn();
        } else if (tile2Clicked) {
            checkTile2Turn();
        } else if (tile3Clicked) {
            checkTile3Turn();
        } else if (tile4Clicked) {
            checkTile4Turn();
        } else if (tile5Clicked) {
            checkTile5Turn();
        } else if (tile6Clicked) {
            checkTile6Turn();
        } else if (tile7Clicked) {
            checkTile7Turn();
        } else if (tile8Clicked) {
            checkTile8Turn();
        } else if (tile9Clicked) {
            checkTile9Turn();
        }
    }

    /**
     * This method checks the answer of players if it is the same to the answer of equation.
     * This method check players turn if the tile is clicked.
     * This method will mark the tile X or O and set disabled if the answer is correct else the other player will have a chance to answer.
     * This method will add 1 to the number of turn.
     * This method will remove the text in question and text in answer when submitted or enter is pressed.
     */
    @Override
    public void checkTile1Turn() {
        if (answer == Integer.parseInt(txtAnswer.getText())) {
            if (turn % 2 == 0) {
                btnTile1.setText("X");
            } else {
                btnTile1.setText("O");
            }
            turn++;
            btnTile1.setEnabled(false);
            clearQuestionAnswer();
        } else {
            btnTile1.setEnabled(true);
            incorrectAnswer();
        }
        tile1Clicked = false; // So that this method will not be executed again
    }

     /**
     * This method checks the answer of players if it is the same to the answer of equation.
     * This method check players turn if the tile is clicked.
     * This method will mark the tile X or O and set disabled if the answer is correct else the other player will have a chance to answer.
     * This method will add 1 to the number of turn.
     * This method will remove the text in question and text in answer when submitted or enter is pressed.
     */
    @Override
    public void checkTile2Turn() {
        if (answer == Integer.parseInt(txtAnswer.getText())) {
            if (turn % 2 == 0) {
                btnTile2.setText("X");
            } else {
                btnTile2.setText("O");
            }
            turn++;
            btnTile2.setEnabled(false);
            clearQuestionAnswer();
        } else {
            btnTile2.setEnabled(true);
            incorrectAnswer();
        }
        tile2Clicked = false; // So that this method will not be executed again
    }

     /**
     * This method checks the answer of players if it is the same to the answer of equation.
     * This method check players turn if the tile is clicked.
     * This method will mark the tile X or O and set disabled if the answer is correct else the other player will have a chance to answer.
     * This method will add 1 to the number of turn.
     * This method will remove the text in question and text in answer when submitted or enter is pressed.
     */
    @Override
    public void checkTile3Turn() {
        if (answer == Integer.parseInt(txtAnswer.getText())) {
            if (turn % 2 == 0) {
                btnTile3.setText("X");
            } else {
                btnTile3.setText("O");
            }
            turn++;
            btnTile3.setEnabled(false);
            clearQuestionAnswer();
        } else {
            btnTile3.setEnabled(true);
            incorrectAnswer();
        }
        tile3Clicked = false;
    }

     /**
     * This method checks the answer of players if it is the same to the answer of equation.
     * This method check players turn if the tile is clicked.
     * This method will mark the tile X or O and set disabled if the answer is correct else the other player will have a chance to answer.
     * This method will add 1 to the number of turn.
     * This method will remove the text in question and text in answer when submitted or enter is pressed.
     */
    @Override
    public void checkTile4Turn() {
        if (answer == Integer.parseInt(txtAnswer.getText())) {
            if (turn % 2 == 0) {
                btnTile4.setText("X");
            } else {
                btnTile4.setText("O");
            }
            turn++;
            btnTile4.setEnabled(false);
            clearQuestionAnswer();
        } else {
            btnTile4.setEnabled(true);
            incorrectAnswer();
        }
        tile4Clicked = false;
    }

     /**
     * This method checks the answer of players if it is the same to the answer of equation.
     * This method check players turn if the tile is clicked.
     * This method will mark the tile X or O and set disabled if the answer is correct else the other player will have a chance to answer.
     * This method will add 1 to the number of turn.
     * This method will remove the text in question and text in answer when submitted or enter is pressed.
     */
    @Override
    public void checkTile5Turn() {
        if (answer == Integer.parseInt(txtAnswer.getText())) {
            if (turn % 2 == 0) {
                btnTile5.setText("X");
            } else {
                btnTile5.setText("O");
            }
            turn++;
            btnTile5.setEnabled(false);
            clearQuestionAnswer();
        } else {
            incorrectAnswer();
            btnTile5.setEnabled(true);
        }
        tile5Clicked = false;
    }

     /**
     * This method checks the answer of players if it is the same to the answer of equation.
     * This method check players turn if the tile is clicked.
     * This method will mark the tile X or O and set disabled if the answer is correct else the other player will have a chance to answer.
     * This method will add 1 to the number of turn.
     * This method will remove the text in question and text in answer when submitted or enter is pressed.
     */
    @Override
    public void checkTile6Turn() {
        if (answer == Integer.parseInt(txtAnswer.getText())) {
            if (turn % 2 == 0) {
                btnTile6.setText("X");
            } else {
                btnTile6.setText("O");
            }
            turn++;
            btnTile6.setEnabled(false);
            clearQuestionAnswer();
        } else {
            incorrectAnswer();
            btnTile6.setEnabled(true);
        }
        tile6Clicked = false;
    }

     /**
     * This method checks the answer of players if it is the same to the answer of equation.
     * This method check players turn if the tile is clicked.
     * This method will mark the tile X or O and set disabled if the answer is correct else the other player will have a chance to answer.
     * This method will add 1 to the number of turn.
     * This method will remove the text in question and text in answer when submitted or enter is pressed.
     */
    @Override
    public void checkTile7Turn() {
        if (answer == Integer.parseInt(txtAnswer.getText())) {
            if (turn % 2 == 0) {
                btnTile7.setText("X");
            } else {
                btnTile7.setText("O");
            }
            turn++;
            btnTile7.setEnabled(false);
            clearQuestionAnswer();
        } else {
            incorrectAnswer();
            btnTile7.setEnabled(true);
        }
        tile7Clicked = false;
    }

     /**
     * This method checks the answer of players if it is the same to the answer of equation.
     * This method check players turn if the tile is clicked.
     * This method will mark the tile X or O and set disabled if the answer is correct else the other player will have a chance to answer.
     * This method will add 1 to the number of turn.
     * This method will remove the text in question and text in answer when submitted or enter is pressed.
     */
    @Override
    public void checkTile8Turn() {
        if (answer == Integer.parseInt(txtAnswer.getText())) {
            if (turn % 2 == 0) {
                btnTile8.setText("X");
            } else {
                btnTile8.setText("O");
            }
            turn++;
            btnTile8.setEnabled(false);
            clearQuestionAnswer();
        } else {
            incorrectAnswer();
            btnTile8.setEnabled(true);
        }
        tile8Clicked = false;
    }

     /**
     * This method checks the answer of players if it is the same to the answer of equation.
     * This method check players turn if the tile is clicked.
     * This method will mark the tile X or O and set disabled if the answer is correct else the other player will have a chance to answer.
     * This method will add 1 to the number of turn.
     * This method will remove the text in question and text in answer when submitted or enter is pressed.
     */
    @Override
    public void checkTile9Turn() {
        if (answer == Integer.parseInt(txtAnswer.getText())) {
            if (turn % 2 == 0) {
                btnTile9.setText("X");
            } else {
                btnTile9.setText("O");
            }
            turn++;
            btnTile9.setEnabled(false);
            clearQuestionAnswer();
        } else {
            incorrectAnswer();
            btnTile9.setEnabled(true);
        }
        tile9Clicked = false;
    }

    /**
     * This method checks the answer of the user when the user submit or pressed enter
     * This method checks if there is already a winner
     * This method checks if the game is draw
     * This method sets all the tile to visible
     */
    public void checkAnswer() {
        btnSubmit.setEnabled(false); // This will prevent the user from clicking the submit button again when there is no question shown
        tileClicked();
        checkWinner();
        drawGame();
        tileSetVisible();
    }

    /**
     * This method process the checkAnswer() method. 
     * This method handles an exception when the user entered or submitted an invalid input.
     * @param evt - action event
     */
    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        try {
            checkAnswer();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please input a number.");
            btnSubmit.setEnabled(true);
        }
    }//GEN-LAST:event_btnSubmitActionPerformed

    /**
     * This method will show a confirmation message if the players want to go back and change their names.
     * This method will make the players go back to previous frame (SetNameJFrame).
     * The player can only go back when they don't click any tile yet.
     * @param evt - action event
     */
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        SetNameJFrame setNameJFrame = new SetNameJFrame();
        if (turn == 0) {
            int choice = JOptionPane.showConfirmDialog(null, "Are you sure you want to go back?", "BACK", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (choice == 0) {
                setNameJFrame.setVisible(true);
                this.dispose();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Game has started already, players cannot go back.");
        }
    }//GEN-LAST:event_btnBackActionPerformed

   /**
     * This method process the checkAnswer() method when the enter key is pressed. 
     * This method handles an exception when the user entered or submitted an invalid input.
     * @param evt - action event
     */
    private void txtAnswerKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAnswerKeyPressed
        try {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                checkAnswer();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please input a number.");
            btnSubmit.setEnabled(true);
        }
    }//GEN-LAST:event_txtAnswerKeyPressed


    /**
     * This method will prevent the players typing a letter, symbols, or special characters.
     * @param evt - action event
     */
    private void txtAnswerKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAnswerKeyTyped
        JTextField txtAnswerTyped = (JTextField) evt.getSource();
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtAnswerKeyTyped

    /**
     * This method will make all hidden components to be visible, and make all tile enabled.
     * @param evt - action event
     */
    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        btnStart.setVisible(false); // To remove the button when the player are already playing.
        imageVisible();
        tileEnabled();
    }//GEN-LAST:event_btnStartActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnStart;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JButton btnTile1;
    private javax.swing.JButton btnTile2;
    private javax.swing.JButton btnTile3;
    private javax.swing.JButton btnTile4;
    private javax.swing.JButton btnTile5;
    private javax.swing.JButton btnTile6;
    private javax.swing.JButton btnTile7;
    private javax.swing.JButton btnTile8;
    private javax.swing.JButton btnTile9;
    private javax.swing.JLabel lblAddImgP1;
    private javax.swing.JLabel lblAddImgP2;
    private javax.swing.JLabel lblBg;
    public javax.swing.JLabel lblCategory;
    private javax.swing.JLabel lblMinusImgP1;
    private javax.swing.JLabel lblMinusImgP2;
    private javax.swing.JLabel lblMultiplyImgP1;
    private javax.swing.JLabel lblMultiplyImgP2;
    private javax.swing.JLabel lblP1Lives;
    private javax.swing.JLabel lblP1LivesCount;
    public javax.swing.JLabel lblP1Name;
    private javax.swing.JLabel lblP2Lives;
    private javax.swing.JLabel lblP2LivesCount;
    public javax.swing.JLabel lblP2Name;
    private javax.swing.JLabel lblQuestion;
    private javax.swing.JPanel line1;
    private javax.swing.JPanel line2;
    private javax.swing.JPanel panelBg;
    private javax.swing.JProgressBar pbP1;
    private javax.swing.JProgressBar pbP2;
    private javax.swing.JLabel tileBg;
    private javax.swing.JTextField txtAnswer;
    // End of variables declaration//GEN-END:variables
}
